프로그래밍에서 개념을 명확히 알고, 그것을 구조화 하는 것이 중요!
- 개념의 정의
- 개념의 포함 관계
- 두 개념의 차이점

프로그래밍의 정의
 -> 프로그램을 만드는 행위
 -> 특정 작업을 수행하는 일련의 명령어들의 모음

 프로그래밍 언어 : 기계어의 대안으로 사람이 이해할 수 있는 새로운 언어 개발
   특징
    - 사람이 이해할 수 있는 문자로 구성
    - 기본적인 규칙과 문법이 존재

소스코드 : 프로그래밍 언어로 작성도니 프로그램

번역기 : - 소스 코드를 컴퓨터가 이해할 수 있는 기계어로 번역
        - 파이썬의 경우 인터프리터 사용


파이썬의 특징 
- Easy to learn (그나마)
- 인터프리터 언어 (Interpreter) -> 통역하듯이 1줄씩 변환
- 객체 지향 프로그래밍(Object Oriented Programming)
   -> 현대 프로그래밍의 기본적인 설계 방법론으로 자리잡은 객체 지향 프로그래밍
   -> 파이썬은 객체 지향언어이며, 모든 것이 객체로 구현되어 있음

파이썬 개발환경
 종류
  - IDE(Intergrated Development Environment)
    -> 통합 개발 환경의 약자로 개발에 필요한 다양하고 강력한 기능들을 모아둔 프로그램
    -> 보통 개발은 IDE로 함 
  - Jupyter Notebook
    -> 문법 학습을 위한 최적의 도구로, 소스 코드와 함께 실행결과와 마크다운 저장 가능
    -> open source 기반의 웹 플랫폼 및 어플리케이션으로, 파이썬을 비론한 다양한 프로그래밍 언어를 지원하며
       셀 단위의 실행이 가능한 것이 특징
  - IDLE(Intergrated Development and Learning Environment)

----------------------------------------------------------------

코드 작성법 
 - 코드를 '어떻게 작성할지'에 대한 가이드라인
 - 파이썬에서 제안하는 스타일 가이드 : PEP8

 - 한줄 주석 (comment)
   -> 주석으로 처리될 내용 앞에 '#'을 입력
 - 여러 줄 주석
   -> 한줄씩 # 또는 ''''' 사용 
     => 주석의 장점
       : 개발자에게 주석을 다는 습관은 매우 중요
       : 코드의 내용을 잘 이해할 수 있도록 작성 
       : 가독성을 저해할 정도로 무분별한 사용은 자제!
       : 코드를 쉽게 이해할 수 있어서 코드 수정 및 협업에 유리
 - 변수란?
   -> 데이터를 저장하기 위해서 사용
   -> 변수를 사용하면 복잡한 값들을 쉽게 사용할 수 있음(추상화)
   -> 동일 변수에 다른 데이터를 언제든 할당 할 수 있기 때문에,'변수'라고 불림
 
 - 식별자
   -> 식별자의 이름은 영문 알파벳, 언더스코어(_), 숫자로 구성
   -> 첫 글자에 숫자가 올 수 없음
   -> 길이 제한이 없고, 대소문자를 구별

 - 연산자
   - '+' 덧셈
   - '-' 뺄셈
   = '*' 곱셈
   - '/' 나눗셈
   - '//' 몫
   - '**' 거듭제곱

 - 자료형(Datatype) 분류
   -> 프로그래밍에서는 다양한 종류의 값을 쓸 수 있음
   -> 사용할 수 있는 데이터의 종류들을 자료형 이라고 함

   - 수치형(Numric Type)
    -> int (정수, integer)
    -> float (부동소수점, 실수, floating point number)
    -> complex (복소수, complex number)
   - 문자열(String Type)
   - 불린형(Boolean Type)

   - 진수 표현
    -> 2진수(binary) : 0b
    -> 8진수(octal) : 0o
    -> 16진수(hexadecimal) : 0x

   - 실수 자료형(float)
    -> 유리수와 무리수를 포함하는 '실수'를 다루는 자료형

   - 문자열 자료형 정의
    -> 모든 문자는 str 타입
    -> 문자열의 작은따옴표나 큰따옴표를 활용하여 표기
    -> 문자열을 묶을 때 동일한 문장부호를 활용
    -> PEP8에서는 소스코드 내에서 하나의 문장부호를 선택하여 유지하도록 함

   - Escape sequence
    -> 역슬래시 뒤에 특정 문자가 와서 특수한 기능을 하는 문자 조합
    -> '\n' : 줄바꿈
    -> '\t' : 탭
    -> '\r' : 캐리지 리턴
    -> '\o' : 널
    -> '\\' : \
    -> '\'' : 단일인용부호
    -> '\"' : 이중인용부호